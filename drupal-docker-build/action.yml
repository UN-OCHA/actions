name: "Drupal Docker Build Workflow"
description: "Does docker authentication, build, push and notification."

inputs:
  registry:
    description: "The docker registry URL"
    required: true
  image:
    description: "The docker image name"
    required: true

runs:
  using: "composite"
  steps:
  - name: Configure AWS Credentials
    id: aws
    if: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: us-east-1

  - name: Determine environment type
    id: env
    uses: docker://ghcr.io/un-ocha/actions:determine-environment-main

  - name: Login to Public ECR
    id: login-aws-public
    if: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
    uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
    with:
      registry: public.ecr.aws
      username: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
      password: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
    env:
      AWS_REGION: us-east-1

  - name: Login to Private ECR
    id: login-aws-private
    if: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
    uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
    with:
      registry: 532768535361.dkr.ecr.us-east-1.amazonaws.com
      username: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
      password: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
    env:
      AWS_REGION: us-east-1

  - name: Login to DockerHub
    id: login-dockerhub
    if: ${{ secrets.DOCKER_USERNAME }}
    uses: docker/login-action@v1
    with:
      username: ${{ secrets.DOCKER_USERNAME }}
      password: ${{ secrets.DOCKER_PASSWORD }}

  - name: Image Metadata
    id: meta
    run: |
      export DOCKER_TAG="${GITHUB_REF#refs/*/}"
      export DOCKER_TAG=${DOCKER_TAG//[^[:alnum:].-]/-}
      echo ::set-output name=DOCKER_TAG::${DOCKER_TAG}
      export VCS_REF=`git rev-parse --short HEAD`
      echo ::set-output name=VCS_REF::${VCS_REF}
      export VCS_URL=`git config --get remote.origin.url | sed 's#git@github.com:#https://github.com/#'`
      echo ::set-output name=VCS_URL::${VCS_URL}
      export BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
      echo ::set-output name=BUILD_DATE::${BUILD_DATE}

  - name: Build docker image
    id: build
    uses: docker/build-push-action@v2
    with:
      build-args: |
        BRANCH_ENVIRONMENT=${BRANCH_ENVIRONMENT}
        VCS_REF=${{ steps.meta.outputs.VCS_REF }}
        VCS_URL=${{ steps.meta.outputs.VCS_URL }}
        BUILD_DATE=${{ steps.meta.outputs.BUILD_DATE }}
        GITHUB_ACTOR=${{ github.actor }}
        GITHUB_REPOSITORY=${{ github.repository }}
        GITHUB_SHA=${{ github.sha }}
        GITHUB_REF=${{ github.ref }}
      labels: |
        info.humanitarianresponse.build.date=${{ steps.meta.outputs.BUILD_DATE }}
        info.humanitarianresponse.build.person=${{ github.actor }}
        info.humanitarianresponse.build.vcs-url=${{ steps.meta.outputs.VCS_URL }}
        info.humanitarianresponse.build.vcs-ref=${{ steps.meta.outputs.VCS_REF }}
      file: docker/Dockerfile
      push: true
      tags: ${{ inputs.registry }}/${{ inputs.image }}:${{ steps.meta.outputs.DOCKER_TAG }}
      secrets: |
          "github_token=${{ secrets.ECR_GITHUB_TOKEN }}"

  - name: Webhook
    id: jenkins
    if: success() && secrets.JENKINS_ECR_TOKEN
    env:
      DOCKER_IMAGE: ${{ inputs.image }}
      DOCKER_TAG: ${{ steps.meta.outputs.DOCKER_TAG }}
      JENKINS_TOKEN: ${{ secrets.JENKINS_ECR_TOKEN }}
    run: |
      curl -H "Token: ${JENKINS_TOKEN}" -X POST "https://jenkins.aws.ahconu.org/generic-webhook-trigger/invoke?DOCKER_IMAGE=${DOCKER_IMAGE}&DOCKER_TAG=${DOCKER_TAG}"

  - name: Flowdock Failure
    id: failure
    if: failure()
    uses: docker://ghcr.io/un-ocha/actions:flowdock-notify-main
    env:
      FLOWDOCK_TOKEN: ${{ secrets.FLOWDOCK_TOKEN }}
      FLOWDOCK_ICON: 'warning'
      FLOWDOCK_MESSAGE: 'Failed to build a new `${{ inputs.image }}` image from ${{ github.ref }}, please go check [GitHub](https://github.com/UN-OCHA/${{ github.repository }}/actions/workflows/docker-build-image.yml).'
      FLOWDOCK_TAGS: 'build,docker,${{ github.actor }}'

  - name: Flowdock Success
    id: success
    if: success()
    uses: docker://ghcr.io/un-ocha/actions:flowdock-notify-main
    env:
      FLOWDOCK_TOKEN: ${{ secrets.FLOWDOCK_TOKEN }}
      FLOWDOCK_ICON: 'package'
      FLOWDOCK_MESSAGE: 'Built a new `${{ inputs.image }}` image from ${{ github.ref }} and pushed to [Amazon ECR](https://console.aws.amazon.com/ecr/repositories?region=us-east-1). Now pinging [Jenkins](https://jenkins.aws.ahconu.org/) to trigger a deploy.'
      FLOWDOCK_TAGS: 'build,docker,${{ github.actor }}'
