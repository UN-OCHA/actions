name: "Drupal Docker Build Workflow"
description: "Does docker authentication, build, push and notification."

inputs:
  aws_access_key_id:
    description: "An Amazon IAM access key"
    required: true
    type: string
  aws_secret_access_key:
    description: "An Amazon IAM access secret"
    required: true
    type: string
  docker_registry_url:
    description: "The docker registry URL"
    required: true
    type: string
  docker_registry_path:
    description: "The docker registry path (organisation) component"
    required: false
    default: '/'
    type: string
  docker_username:
    description: "The docker registry username"
    required: false
    type: string
  docker_password:
    description: "The docker registry password"
    required: false
    type: string
  docker_image:
    description: "The docker image name"
    required: true
    type: string
  docker_file:
    description: "The (relative) path to the Dockerfile to sue for the build"
    required: false
    default: 'docker/Dockerfile'
    type: string
  ecr_github_token:
    description: "An authentication token for Amazon ECR to access GitHub"
    required: false
    type: string
  ecr_jenkins_token:
    description: "An authentication token for GitHub to access Jenkins"
    required: false
    type: string
  slack_bot_token:
    description: "The secret slack authentication token"
    require: false
    type: string
  slack_channel_name:
    description: "The slack channel to send the message to"
    require: false
    type: string
  flowdock_token:
    description: "The flowdock token. This is ignored."
    required: false
    type: string
  flowdock_icon_failure:
    description: "The icon to attach to the flowdock failure message. This is ignored."
    default: 'boom'
    required: false
    type: string
  flowdock_icon_success:
    description: "The icon to attach to the flowdock success message. This is ignored."
    default: 'package'
    required: false
    type: string


runs:
  using: "composite"
  steps:
  - name: Configure AWS Credentials
    id: aws
    if: ${{ inputs.ECR_AWS_ACCESS_KEY_ID }}
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ inputs.aws_access_key_id }}
      aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
      aws-region: us-east-1

  - name: Determine environment type
    id: env
    uses: docker://ghcr.io/un-ocha/actions:determine-environment-v2

  - name: Login to Public ECR
    id: login-public
    if: inputs.docker_username
    uses: docker/login-action@v2.1.0
    with:
      registry: public.ecr.aws
      username: ${{ inputs.docker_username }}
      password: ${{ inputs.docker_password }}
    env:
      AWS_REGION: us-east-1

  - name: Login to Private ECR
    id: login-private
    if: endsWith(inputs.docker_registry_url, '.amazonaws.com') && inputs.docker_username
    uses: docker/login-action@v2.1.0
    with:
      registry: ${{ inputs.docker_registry_url }}
      username: ${{ inputs.docker_username }}
      password: ${{ inputs.docker_password }}
    env:
      AWS_REGION: us-east-1

  - name: Image Metadata
    id: meta
    run: |
      export DOCKER_TAG="${GITHUB_REF#refs/*/}"
      export DOCKER_TAG=${DOCKER_TAG//[^[:alnum:].-]/-}
      echo "DOCKER_TAG=${DOCKER_TAG}" >> $GITHUB_OUTPUT
      export VCS_REF=`git rev-parse --short HEAD`
      echo "VCS_REF=${VCS_REF}" >> $GITHUB_OUTPUT
      export VCS_URL=`git config --get remote.origin.url | sed 's#git@github.com:#https://github.com/#'`
      echo "VCS_URL=${VCS_URL}" >> $GITHUB_OUTPUT
      export BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
      echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_OUTPUT
    shell: bash

  - name: Build docker image
    id: build
    uses: docker/build-push-action@v3.2.0
    with:
      build-args: |
        BRANCH_ENVIRONMENT=${BRANCH_ENVIRONMENT}
        VCS_REF=${{ steps.meta.outputs.VCS_REF }}
        VCS_URL=${{ steps.meta.outputs.VCS_URL }}
        BUILD_DATE=${{ steps.meta.outputs.BUILD_DATE }}
        GITHUB_ACTOR=${{ github.actor }}
        GITHUB_REPOSITORY=${{ github.repository }}
        GITHUB_SHA=${{ github.sha }}
        GITHUB_REF=${{ github.ref }}
      labels: |
        info.humanitarianresponse.build.date=${{ steps.meta.outputs.BUILD_DATE }}
        info.humanitarianresponse.build.person=${{ github.actor }}
        info.humanitarianresponse.build.vcs-url=${{ steps.meta.outputs.VCS_URL }}
        info.humanitarianresponse.build.vcs-ref=${{ steps.meta.outputs.VCS_REF }}
      file: ${{ inputs.docker_file }}
      push: true
      tags: ${{ inputs.docker_registry_url }}${{ inputs.docker_registry_path }}${{ inputs.docker_image }}:${{ steps.meta.outputs.DOCKER_TAG }}
      secrets: |
          "github_token=${{ inputs.ecr_github_token }}"
    continue-on-error: true

  - name: Webhook
    id: webhook
    if: success() && inputs.ecr_jenkins_token
    env:
      DOCKER_IMAGE: ${{ inputs.docker_image }}
      DOCKER_TAG: ${{ steps.meta.outputs.DOCKER_TAG }}
      JENKINS_TOKEN: ${{ inputs.ecr_jenkins_token }}
    run: |
      curl -H "Token: ${JENKINS_TOKEN}" -X POST "https://jenkins.aws.ahconu.org/generic-webhook-trigger/invoke?DOCKER_IMAGE=${DOCKER_IMAGE}&DOCKER_TAG=${DOCKER_TAG}"
    shell: bash

  - name: Slack Notification
    id: slack_success
    if: success() && inputs.slack_bot_token && inputs.slack_channel_name
    uses: slackapi/slack-github-action@v1.23.0
    with:
      channel-id: '${{ inputs.slack_channel_name }}'
      payload: |
        {
          "text": "Docker image build ${{ job.status }} for `${{ inputs.docker_image }}` image from ${{ github.ref }} ${{ job.status }}",
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "Docker image build ${{ job.status }} for `${{ inputs.docker_image }}` image from ${{ github.ref }} (<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Details>)"
              }
            }
          ]
        }
    env:
      SLACK_BOT_TOKEN: ${{ inputs.slack_bot_token }}

  - name: Slack Notification
    id: slack_failure
    if: failure() && inputs.slack_bot_token && inputs.slack_channel_name
    uses: slackapi/slack-github-action@v1.23.0
    with:
      channel-id: '${{ inputs.slack_channel_name }}'
      payload: |
        {
          "text": "Docker image build failed for `${{ inputs.docker_image }}` image from ${{ github.ref }} ${{ job.status }}",
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "Docker image build failed for `${{ inputs.docker_image }}` image from ${{ github.ref }} (<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Details>)"
              }
            }
          ]
        }
    env:
      SLACK_BOT_TOKEN: ${{ inputs.slack_bot_token }}
